//
// MDD.h
//

#ifndef _MDD_H_
#define _MDD_H_
#include <KLV.h>

const ASDCP::MDDEntry s_MDD_Table[] = {
  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x02, 0x01, 0x01,
      0x0d, 0x01, 0x03, 0x01, 0x15, 0x01, 0x08, 0x01 }, {0}, true, "JPEG2000Essence", // 0
    "JPEG 2000 Compressed Picture Essence Descriptor" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x02, 0x01, 0x01,
      0x0d, 0x01, 0x03, 0x01, 0x15, 0x01, 0x05, 0x00 }, {0}, true, "MPEG2Essence", // 1
    "MPEG-2 Compressed Picture Essence Descriptor" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x02, 0x01, 0x01,
      0x0d, 0x01, 0x03, 0x01, 0x16, 0x01, 0x01, 0x00 }, {0}, true, "WAVEssence", // 2
    "PCM Audio Essence Descriptor" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x04, 0x01, 0x07,
      0x0d, 0x01, 0x03, 0x01, 0x02, 0x7e, 0x01, 0x00 }, {0}, true, "EKLVPacket", // 3
    "Encrypted Essence Container Descriptor" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x03, 0x01, 0x02, 0x10, 0x01, 0x00, 0x00, 0x00 }, {0}, false, "KLVFill", // 4
    "KLV Filler packet" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x03, 0x01, 0x02, 0x01, 0x06, 0x00, 0x00, 0x00 }, {0}, false, "PartitionMetadata_MajorVersion", // 5
    "Major Version number of MXF byte-level format (non-backwards compatible version number)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x03, 0x01, 0x02, 0x01, 0x07, 0x00, 0x00, 0x00 }, {0}, false, "PartitionMetadata_MinorVersion", // 6
    "Minor Version number of MXF byte-level format (backwards compatible version number)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x03, 0x01, 0x02, 0x01, 0x09, 0x00, 0x00, 0x00 }, {0}, false, "PartitionMetadata_KAGSize", // 7
    "Size of the KLV Alignment Grid (KAG) for this partition, in bytes" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x06, 0x10, 0x10, 0x03, 0x01, 0x00, 0x00, 0x00 }, {0}, false, "PartitionMetadata_ThisPartition", // 8
    "Byte offset of the start of This Partition, relative to the start of the Header Partition" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x06, 0x10, 0x10, 0x02, 0x01, 0x00, 0x00, 0x00 }, {0}, false, "PartitionMetadata_PreviousPartition", // 9
    "Byte offset of the start of the Previous Partition, relative to the start of the Header Partition" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x06, 0x10, 0x10, 0x05, 0x01, 0x00, 0x00, 0x00 }, {0}, false, "PartitionMetadata_FooterPartition", // 10
    "Byte offset of the start of the Footer Partition, relative to the start of the Header Partition" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x04, 0x06, 0x09, 0x01, 0x00, 0x00, 0x00, 0x00 }, {0}, false, "PartitionMetadata_HeaderByteCount", // 11
    "Count of Bytes used for Header Metadata. This starts at the byte following the Partition pack and includes any trailing filler which is part of the Header Metadata." },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x04, 0x06, 0x09, 0x02, 0x00, 0x00, 0x00, 0x00 }, {0}, false, "PartitionMetadata_IndexByteCount", // 12
    "Count of Bytes used for Index Table Segments. This starts at the byte following the Header Metadata and includes any trailing filler which is part of the Index Table." },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x01, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00, 0x00 }, {0}, false, "PartitionMetadata_IndexSID", // 13
    "Index Table Segment Identifier in this partition. The value 0 defines that there are no Index Table segments in this partition." },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x06, 0x08, 0x01, 0x02, 0x01, 0x03, 0x00, 0x00 }, {0}, false, "PartitionMetadata_BodyOffset", // 14
    "Byte offset of the first byte in the following Essence Container data relative to the start of the Essence Container identified by this BodySID" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x01, 0x03, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00 }, {0}, false, "PartitionMetadata_BodySID", // 15
    "Identifier of the Essence Container data found in this partition. The value 0 indicates there is no Essence Container data in this partition." },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x01, 0x02, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00 }, {0}, false, "PartitionMetadata_OperationalPattern", // 16
    "Universal Label of the Operational Pattern to which this file complies" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x01, 0x02, 0x02, 0x10, 0x02, 0x01, 0x00, 0x00 }, {0}, false, "PartitionMetadata_EssenceContainers", // 17
    "The unordered batch of Universal Labels of Essence Containers used in or referenced by this file" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x05, 0x01, 0x01, 
      0x0d, 0x01, 0x02, 0x01, 0x01, 0x02, 0x01, 0x00 }, {0}, false, "OpenHeader", // 18
    "Open Header Partition Pack" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x05, 0x01, 0x01, 
      0x0d, 0x01, 0x02, 0x01, 0x01, 0x02, 0x03, 0x00 }, {0}, false, "OpenCompleteHeader", // 19
    "Open Complete Header Partition Pack" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x05, 0x01, 0x01, 
      0x0d, 0x01, 0x02, 0x01, 0x01, 0x02, 0x02, 0x00 }, {0}, false, "ClosedHeader", // 20
    "Closed Header Partition Pack" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x05, 0x01, 0x01, 
      0x0d, 0x01, 0x02, 0x01, 0x01, 0x02, 0x04, 0x00 }, {0}, false, "ClosedCompleteHeader", // 21
    "Closed Complete Header Partition Pack" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x05, 0x01, 0x01, 
      0x0d, 0x01, 0x02, 0x01, 0x01, 0x03, 0x01, 0x00 }, {0}, false, "OpenBodyPartition", // 22
    "Open Body Partition Pack" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x05, 0x01, 0x01, 
      0x0d, 0x01, 0x02, 0x01, 0x01, 0x03, 0x03, 0x00 }, {0}, false, "OpenCompleteBodyPartition", // 23
    "Open Complete Body Partition Pack" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x05, 0x01, 0x01, 
      0x0d, 0x01, 0x02, 0x01, 0x01, 0x03, 0x02, 0x00 }, {0}, false, "ClosedBodyPartition", // 24
    "Closed Body Partition Pack" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x05, 0x01, 0x01, 
      0x0d, 0x01, 0x02, 0x01, 0x01, 0x03, 0x04, 0x00 }, {0}, false, "ClosedCompleteBodyPartition", // 25
    "Closed Complete Body Partition Pack" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x05, 0x01, 0x01, 
      0x0d, 0x01, 0x02, 0x01, 0x01, 0x04, 0x02, 0x00 }, {0}, false, "Footer", // 26
    "Footer Partition Pack" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x05, 0x01, 0x01, 
      0x0d, 0x01, 0x02, 0x01, 0x01, 0x04, 0x04, 0x00 }, {0}, false, "CompleteFooter", // 27
    "Complete Footer Partition Pack" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x05, 0x01, 0x01, 
      0x0d, 0x01, 0x02, 0x01, 0x01, 0x05, 0x01, 0x00 }, {0}, false, "Primer", // 28
    "Primer Pack" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x06, 0x01, 0x01, 0x07, 0x15, 0x00, 0x00, 0x00 }, {0}, false, "Primer_LocalTagEntryBatch", // 29
    "Local Tag Entry Batch" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x01, 0x03, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00 }, {0}, false, "LocalTagEntryBatch_Primer_LocalTag", // 30
    "The value of the Local Tag" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x01, 0x03, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00 }, {0}, false, "LocalTagEntryBatch_Primer_UID", // 31
    "The UID of which the local tag is an alias" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x01, 0x01, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00 }, {0x3c, 0x0a}, false, "InterchangeObject_InstanceUID", // 32
    "Unique ID of this instance" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x05, 0x20, 0x07, 0x01, 0x08, 0x00, 0x00, 0x00 }, {0x01, 0x02}, true, "GenerationInterchangeObject_GenerationUID", // 33
    "Generation Instance" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, {0}, false, "DefaultObject", // 34
    "" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x05, 0x30, 0x04, 0x06, 0x00, 0x00, 0x00, 0x00 }, {0x3f, 0x0b}, false, "IndexTableSegmentBase_IndexEditRate", // 35
    "Edit Rate copied from the tracks of the Essence Container" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x07, 0x02, 0x01, 0x03, 0x01, 0x0a, 0x00, 0x00 }, {0x3f, 0x0c}, false, "IndexTableSegmentBase_IndexStartPosition", // 36
    "The first editable unit indexed by this Index Table segment measured in File Package Edit Units" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x07, 0x02, 0x02, 0x01, 0x01, 0x02, 0x00, 0x00 }, {0x3f, 0x0d}, false, "IndexTableSegmentBase_IndexDuration", // 37
    "Time duration of this table segment measured in Edit Unitsof the referenceg package" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x04, 0x06, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00 }, {0x3f, 0x05}, false, "IndexTableSegmentBase_EditUnitByteCount", // 38
    "Byte count of each and every Edit Unit. A value of 0 defines the byte count of Edit Units is only given in the Index Entry Array" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x01, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00, 0x00 }, {0x3f, 0x06}, false, "IndexTableSegmentBase_IndexSID", // 39
    "Stream Identifier (SID) of Index Stream" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x01, 0x03, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00 }, {0x3f, 0x07}, false, "IndexTableSegmentBase_BodySID", // 40
    "Stream Identifier (SID) of Essence Container Stream" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x04, 0x04, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00 }, {0x3f, 0x08}, false, "IndexTableSegmentBase_SliceCount", // 41
    "Number of slices minus 1 (NSL)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x04, 0x04, 0x01, 0x07, 0x00, 0x00, 0x00 }, {0x3f, 0x0e}, true, "IndexTableSegmentBase_PosTableCount", // 42
    "Number of PosTable Entries minus 1 (NPE)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x02, 0x01, 0x01, 0x10, 0x01, 0x00 }, {0}, false, "IndexTableSegment", // 43
    "A segment of an Index Table" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x04, 0x04, 0x01, 0x06, 0x00, 0x00, 0x00 }, {0x3f, 0x09}, true, "IndexTableSegment_DeltaEntryArray", // 44
    "Map Elements onto Slices" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x04, 0x04, 0x04, 0x01, 0x04, 0x00, 0x00, 0x00 }, {0}, false, "DeltaEntryArray_IndexTableSegment_PosTableIndex", // 45
    "Index into PosTable (or Apply Temporta Reordering if -1)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x04, 0x04, 0x04, 0x01, 0x02, 0x00, 0x00, 0x00 }, {0}, false, "DeltaEntryArray_IndexTableSegment_Slice", // 46
    "Slice number in IndexEntry" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x04, 0x04, 0x04, 0x01, 0x03, 0x00, 0x00, 0x00 }, {0}, false, "DeltaEntryArray_IndexTableSegment_ElementDelta", // 47
    "Delta from start of slice to this Element" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x04, 0x04, 0x02, 0x05, 0x00, 0x00, 0x00 }, {0x3f, 0x0a}, false, "IndexTableSegment_IndexEntryArray", // 48
    "Index from Edit Unit number to stream offset" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x04, 0x04, 0x04, 0x02, 0x03, 0x00, 0x00, 0x00 }, {0}, false, "IndexEntryArray_IndexTableSegment_TemporalOffset", // 49
    "Offset in edit units from Display Order to Coded Order" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x04, 0x04, 0x04, 0x02, 0x04, 0x00, 0x00, 0x00 }, {0}, false, "IndexEntryArray_IndexTableSegment_AnchorOffset", // 50
    "Offset in edit units to previous Anchor Frame. The value is zero if this is an anchor frame." },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x04, 0x04, 0x04, 0x02, 0x02, 0x00, 0x00, 0x00 }, {0}, false, "IndexEntryArray_IndexTableSegment_Flags", // 51
    "Flags for this Edit Unit" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x04, 0x04, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00 }, {0}, false, "IndexEntryArray_IndexTableSegment_StreamOffset", // 52
    "Offset in bytes from the first KLV element in this Edit Unit within the Essence Container" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x04, 0x04, 0x04, 0x01, 0x05, 0x00, 0x00, 0x00 }, {0}, false, "IndexEntryArray_IndexTableSegment_SliceOffsetArray", // 53
    "Array of offsets in bytes from the Stream Offset to the start of each slice." },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x04, 0x04, 0x04, 0x01, 0x08, 0x00, 0x00, 0x00 }, {0}, false, "IndexEntryArray_IndexTableSegment_PosTableArray", // 54
    "Array of fractional position offsets from the start of the content package to the synchronized sample in the Content Package" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x05, 0x01, 0x01, 
      0x0d, 0x01, 0x02, 0x01, 0x01, 0x11, 0x01, 0x00 }, {0}, false, "RandomIndexMetadata", // 55
    "Random Index Pack" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x01, 0x03, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00 }, {0}, false, "PartitionArray_RandomIndexMetadata_BodySID", // 56
    "Stream ID of the Body in this partition" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x06, 0x09, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00 }, {0}, false, "PartitionArray_RandomIndexMetadata_ByteOffset", // 57
    "Byte offset from file start (1st byte of the file which is numbered 0) to the 1st byte of the Partition Pack Key" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x04, 0x06, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00 }, {0}, false, "RandomIndexMetadata_Length", // 58
    "Overall Length of this Pack including the Set Key and BER Length fields" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x2f, 0x00 }, {0}, false, "Preface", // 59
    "Preface Set" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x07, 0x02, 0x01, 0x10, 0x02, 0x04, 0x00, 0x00 }, {0x3b, 0x02}, false, "Preface_LastModifiedDate", // 60
    "Date &amp; time of the last modification of the file" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x03, 0x01, 0x02, 0x01, 0x05, 0x00, 0x00, 0x00 }, {0x3b, 0x05}, false, "Preface_Version", // 61
    "The value shall be 258 (i.e. v1.2)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x03, 0x01, 0x02, 0x01, 0x04, 0x00, 0x00, 0x00 }, {0x3b, 0x07}, true, "Preface_ObjectModelVersion", // 62
    "Simple integer version number of Object Model" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x06, 0x01, 0x01, 0x04, 0x01, 0x08, 0x00, 0x00 }, {0x3b, 0x08}, true, "Preface_PrimaryPackage", // 63
    "The primary Package in this file" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x06, 0x01, 0x01, 0x04, 0x06, 0x04, 0x00, 0x00 }, {0x3b, 0x06}, false, "Preface_Identifications", // 64
    "Ordered array of strong references to Identification sets recording all modifications to the file" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x06, 0x01, 0x01, 0x04, 0x02, 0x01, 0x00, 0x00 }, {0x3b, 0x03}, false, "Preface_ContentStorage", // 65
    "Strong reference to Content Storage object" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x01, 0x02, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00 }, {0x3b, 0x09}, false, "Preface_OperationalPattern", // 66
    "Universal Label of the Operational Pattern which this file complies to (repeat of Partition Pack value)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x01, 0x02, 0x02, 0x10, 0x02, 0x01, 0x00, 0x00 }, {0x3b, 0x0a}, false, "Preface_EssenceContainers", // 67
    "Unordered batch of ULs of Essence Containers used in or referenced by this file (repeat of Partition Pack value)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x01, 0x02, 0x02, 0x10, 0x02, 0x02, 0x00, 0x00 }, {0x3b, 0x0b}, false, "Preface_DMSchemes", // 68
    "An unordered batch of Universal Labels of all the Descriptive Metadata schemes used in this file" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x30, 0x00 }, {0}, false, "Identification", // 69
    "Identification set" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x05, 0x20, 0x07, 0x01, 0x01, 0x00, 0x00, 0x00 }, {0x3c, 0x09}, false, "Identification_ThisGenerationUID", // 70
    "This Generation Identifier" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x05, 0x20, 0x07, 0x01, 0x02, 0x01, 0x00, 0x00 }, {0x3c, 0x01}, false, "Identification_CompanyName", // 71
    "Manufacturer of the equipment or application that created or modified the file" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x05, 0x20, 0x07, 0x01, 0x03, 0x01, 0x00, 0x00 }, {0x3c, 0x02}, false, "Identification_ProductName", // 72
    "Name of the application which created or modified this file" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x05, 0x20, 0x07, 0x01, 0x04, 0x00, 0x00, 0x00 }, {0x3c, 0x03}, true, "Identification_ProductVersion", // 73
    "Maj.min.tweak.build.rel  version number of this application" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x05, 0x20, 0x07, 0x01, 0x05, 0x01, 0x00, 0x00 }, {0x3c, 0x04}, false, "Identification_VersionString", // 74
    "Human readable name of the application version" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x05, 0x20, 0x07, 0x01, 0x07, 0x00, 0x00, 0x00 }, {0x3c, 0x05}, false, "Identification_ProductUID", // 75
    "A unique identification for the product which created this file (defined by the manufacturer)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x07, 0x02, 0x01, 0x10, 0x02, 0x03, 0x00, 0x00 }, {0x3c, 0x06}, false, "Identification_ModificationDate", // 76
    "Time &amp; date an application created or modified this file and created this Identification set" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x05, 0x20, 0x07, 0x01, 0x0a, 0x00, 0x00, 0x00 }, {0x3c, 0x07}, true, "Identification_ToolkitVersion", // 77
    "Maj.min.tweak.build.rel version of software or hardware codec used" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x05, 0x20, 0x07, 0x01, 0x06, 0x01, 0x00, 0x00 }, {0x3c, 0x08}, true, "Identification_Platform", // 78
    "Human readable name of the operating system used." },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x18, 0x00 }, {0}, false, "ContentStorage", // 79
    "Content Storage set" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x06, 0x01, 0x01, 0x04, 0x05, 0x01, 0x00, 0x00 }, {0x19, 0x01}, false, "ContentStorage_Packages", // 80
    "Unordered batch of all packages used in this file" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x06, 0x01, 0x01, 0x04, 0x05, 0x02, 0x00, 0x00 }, {0x19, 0x02}, true, "ContentStorage_EssenceContainerData", // 81
    "Unordered batch of strong references to Essence Container Data sets used in this file" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x23, 0x00 }, {0}, false, "EssenceContainerData", // 82
    "Essence Container Data set" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x06, 0x01, 0x01, 0x06, 0x01, 0x00, 0x00, 0x00 }, {0x27, 0x01}, false, "EssenceContainerData_LinkedPackageUID", // 83
    "Identifier of the Package to which this set is linked as a UMID" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x01, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00, 0x00 }, {0x3f, 0x06}, true, "EssenceContainerData_IndexSID", // 84
    "ID of the Index Table for the Essence Container to which this set is linked" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x01, 0x03, 0x04, 0x04, 0x00, 0x00, 0x00, 0x00 }, {0x3f, 0x07}, false, "EssenceContainerData_BodySID", // 85
    "ID of the Essence Container to which this set is linked" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x01, 0x01, 0x15, 0x10, 0x00, 0x00, 0x00, 0x00 }, {0x44, 0x01}, false, "GenericPackage_PackageUID", // 86
    "Unique Package Identifier as a UMID" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x01, 0x03, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00 }, {0x44, 0x02}, true, "GenericPackage_Name", // 87
    "Human readable package name" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x07, 0x02, 0x01, 0x10, 0x01, 0x03, 0x00, 0x00 }, {0x44, 0x05}, false, "GenericPackage_PackageCreationDate", // 88
    "The date &amp; time of creation of this package" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x07, 0x02, 0x01, 0x10, 0x02, 0x05, 0x00, 0x00 }, {0x44, 0x04}, false, "GenericPackage_PackageModifiedDate", // 89
    "The date &amp; time of last modification of this package" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x06, 0x01, 0x01, 0x04, 0x06, 0x05, 0x00, 0x00 }, {0x44, 0x03}, false, "GenericPackage_Tracks", // 90
    "Array of Unique IDs of Tracks" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x32, 0x00 }, {0}, false, "NetworkLocator", // 91
    "Network Locator set for location with a URL" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x01, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00 }, {0x40, 0x01}, false, "NetworkLocator_URLString", // 92
    "A URL indicating where the essence may be found." },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x33, 0x00 }, {0}, false, "TextLocator", // 93
    "Text Locator set for location with a human-readable text string" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x01, 0x04, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00 }, {0x41, 0x01}, false, "TextLocator_LocatorName", // 94
    "Value of a human-readable locator text string for manual location of essence" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x01, 0x07, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00 }, {0x48, 0x01}, false, "GenericTrack_TrackID", // 95
    "ID of the track in this package (for linking to a SourceTrackID in a segment)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x01, 0x04, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00 }, {0x48, 0x04}, false, "GenericTrack_TrackNumber", // 96
    "Number used to link to the track in the Essence Container if it exists" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x01, 0x07, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00 }, {0x48, 0x02}, true, "GenericTrack_TrackName", // 97
    "Human readable name of the track type" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x06, 0x01, 0x01, 0x04, 0x02, 0x04, 0x00, 0x00 }, {0x48, 0x03}, false, "GenericTrack_Sequence", // 98
    "Strong Reference to Sequence Set" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x3a, 0x00 }, {0}, false, "StaticTrack", // 99
    "" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x3b, 0x00 }, {0}, false, "Track", // 100
    "Track" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x05, 0x30, 0x04, 0x05, 0x00, 0x00, 0x00, 0x00 }, {0x4b, 0x01}, false, "Track_EditRate", // 101
    "Edit Rate of Track" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x07, 0x02, 0x01, 0x03, 0x01, 0x03, 0x00, 0x00 }, {0x4b, 0x02}, false, "Track_Origin", // 102
    "An Offset used to resolved timeline references to this track. The start of the track has this timeline value measured in Edit Units." },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x39, 0x00 }, {0}, false, "EventTrack", // 103
    "Event Track" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x05, 0x30, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00 }, {0x49, 0x01}, false, "EventTrack_EventEditRate", // 104
    "Edit Rate of Event Track" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x07, 0x02, 0x01, 0x03, 0x01, 0x0b, 0x00, 0x00 }, {0x49, 0x02}, true, "EventTrack_EventOrigin", // 105
    "An Offset used to resolved timeline references to this event track. The start of the event track has this timeline value measured in Edit Units." },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x04, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00 }, {0x02, 0x01}, false, "StructuralComponent_DataDefinition", // 106
    "Data Definition - kind of data or metadata this structure refers to" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x07, 0x02, 0x02, 0x01, 0x01, 0x03, 0x00, 0x00 }, {0x02, 0x02}, false, "StructuralComponent_Duration", // 107
    "Duration (in units of edit rate)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0f, 0x00 }, {0}, false, "Sequence", // 108
    "Sequence" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x06, 0x01, 0x01, 0x04, 0x06, 0x09, 0x00, 0x00 }, {0x10, 0x01}, false, "Sequence_StructuralComponents", // 109
    "Ordered array of strong references to Structural Components" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x14, 0x00 }, {0}, false, "TimecodeComponent", // 110
    "Timecode Component" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x04, 0x04, 0x01, 0x01, 0x02, 0x06, 0x00, 0x00 }, {0x15, 0x02}, false, "TimecodeComponent_RoundedTimecodeBase", // 111
    "Integer frames per second" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x07, 0x02, 0x01, 0x03, 0x01, 0x05, 0x00, 0x00 }, {0x15, 0x01}, false, "TimecodeComponent_StartTimecode", // 112
    "Starting timecode" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x04, 0x01, 0x01, 0x05, 0x00, 0x00, 0x00 }, {0x15, 0x03}, false, "TimecodeComponent_DropFrame", // 113
    "Drop frame flag" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x11, 0x00 }, {0}, false, "SourceClip", // 114
    "Source Clip" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x07, 0x02, 0x01, 0x03, 0x01, 0x04, 0x00, 0x00 }, {0x12, 0x01}, false, "SourceClip_StartPosition", // 115
    "Offset into Essence measured in edit units of the track containing this segment" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x06, 0x01, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00 }, {0x11, 0x01}, false, "SourceClip_SourcePackageID", // 116
    "ID of referenced Package as a UMID" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x06, 0x01, 0x01, 0x03, 0x02, 0x00, 0x00, 0x00 }, {0x11, 0x02}, false, "SourceClip_SourceTrackID", // 117
    "Track ID of the referenced Track within the referenced Package" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x41, 0x00 }, {0}, false, "DMSegment", // 118
    "Descriptive Metadata Segment" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x07, 0x02, 0x01, 0x03, 0x03, 0x03, 0x00, 0x00 }, {0x06, 0x01}, false, "DMSegment_EventStartPosition", // 119
    "Offset into the descriptive metadata track in edit units" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x05, 0x30, 0x04, 0x04, 0x01, 0x00, 0x00, 0x00 }, {0x06, 0x02}, true, "DMSegment_EventComment", // 120
    "Description of the Descriptive Metadata Framework" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x01, 0x07, 0x01, 0x05, 0x00, 0x00, 0x00, 0x00 }, {0x61, 0x02}, false, "DMSegment_TrackIDs", // 121
    "An unordered list of track ID values that identify the tracks in this Package to which this DM Framework refers (if omitted, refers to all essence tracks)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x06, 0x01, 0x01, 0x04, 0x02, 0x0c, 0x00, 0x00 }, {0x61, 0x01}, false, "DMSegment_DMFramework", // 122
    "Strong Reference to the Descriptive Metadata Framework" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x45, 0x00 }, {0}, false, "DMSourceClip", // 123
    "Descriptive Metadata SourceClip" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x01, 0x07, 0x01, 0x06, 0x00, 0x00, 0x00, 0x00 }, {0x61, 0x03}, true, "DMSourceClip_DMSourceClipTrackIDs", // 124
    "An unordered list of track ID values that identify the tracks in this Package to which the referenced Descriptive Metadata refers (if omitted, refers to all essence tracks)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x36, 0x00 }, {0}, false, "MaterialPackage", // 125
    "Material Package set" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x37, 0x00 }, {0}, false, "SourcePackage", // 126
    "File Package set" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x06, 0x01, 0x01, 0x04, 0x02, 0x03, 0x00, 0x00 }, {0x47, 0x01}, false, "SourcePackage_Descriptor", // 127
    "Strong Reference to the Descriptor" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x06, 0x01, 0x01, 0x04, 0x06, 0x03, 0x00, 0x00 }, {0x2f, 0x01}, true, "GenericDescriptor_Locators", // 128
    "Ordered array of strong references to Locator sets" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x06, 0x01, 0x01, 0x04, 0x06, 0x10, 0x00, 0x00 }, {0}, true, "GenericDescriptor_SubDescriptors", // 129
    "Ordered array of strong references to sub descriptor sets" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x25, 0x00 }, {0}, false, "FileDescriptor", // 130
    "File Descriptor" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x06, 0x01, 0x01, 0x03, 0x05, 0x00, 0x00, 0x00 }, {0x30, 0x06}, true, "FileDescriptor_LinkedTrackID", // 131
    "Link to (i.e. value of) the Track ID of the Track in this Package to which the Descriptor applies" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x06, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00 }, {0x30, 0x01}, false, "FileDescriptor_SampleRate", // 132
    "The field or frame rate of the Essence Container (not the essence sampling clock rate)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x06, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00 }, {0x30, 0x02}, true, "FileDescriptor_ContainerDuration", // 133
    "Duration of Essence Container (measured in Edit Units)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x06, 0x01, 0x01, 0x04, 0x01, 0x02, 0x00, 0x00 }, {0x30, 0x04}, false, "FileDescriptor_EssenceContainer", // 134
    "The UL identifying the Essence Container described by this Descriptor" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x06, 0x01, 0x01, 0x04, 0x01, 0x03, 0x00, 0x00 }, {0x30, 0x05}, true, "FileDescriptor_Codec", // 135
    "UL to identify a codec compatible with this Essence Container" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x27, 0x00 }, {0}, false, "GenericPictureEssenceDescriptor", // 136
    "Defines the Picture Essence Descriptor set" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x05, 0x01, 0x13, 0x00, 0x00, 0x00, 0x00 }, {0x32, 0x15}, true, "GenericPictureEssenceDescriptor_SignalStandard", // 137
    "Underlying signal standard" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x01, 0x03, 0x01, 0x04, 0x00, 0x00, 0x00 }, {0x32, 0x0c}, false, "GenericPictureEssenceDescriptor_FrameLayout", // 138
    "Interlace or Progressive layout" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x01, 0x05, 0x02, 0x02, 0x00, 0x00, 0x00 }, {0x32, 0x03}, false, "GenericPictureEssenceDescriptor_StoredWidth", // 139
    "Horizontal Size of active picture" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x01, 0x05, 0x02, 0x01, 0x00, 0x00, 0x00 }, {0x32, 0x02}, false, "GenericPictureEssenceDescriptor_StoredHeight", // 140
    "Vertical Field Size of active picture" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x01, 0x03, 0x02, 0x08, 0x00, 0x00, 0x00 }, {0x32, 0x16}, true, "GenericPictureEssenceDescriptor_StoredF2Offset", // 141
    "Topness Adjustment for stored picture" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x01, 0x05, 0x01, 0x08, 0x00, 0x00, 0x00 }, {0x32, 0x05}, true, "GenericPictureEssenceDescriptor_SampledWidth", // 142
    "Sampled width supplied to codec" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x01, 0x05, 0x01, 0x07, 0x00, 0x00, 0x00 }, {0x32, 0x04}, true, "GenericPictureEssenceDescriptor_SampledHeight", // 143
    "Sampled height supplied to codec" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x01, 0x05, 0x01, 0x09, 0x00, 0x00, 0x00 }, {0x32, 0x06}, true, "GenericPictureEssenceDescriptor_SampledXOffset", // 144
    "Offset from sampled to stored width" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x01, 0x05, 0x01, 0x0a, 0x00, 0x00, 0x00 }, {0x32, 0x07}, true, "GenericPictureEssenceDescriptor_SampledYOffset", // 145
    "Offset from sampled to stored" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x01, 0x05, 0x01, 0x0b, 0x00, 0x00, 0x00 }, {0x32, 0x08}, true, "GenericPictureEssenceDescriptor_DisplayHeight", // 146
    "Displayed Height placed in Production Aperture" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x01, 0x05, 0x01, 0x0c, 0x00, 0x00, 0x00 }, {0x32, 0x09}, true, "GenericPictureEssenceDescriptor_DisplayWidth", // 147
    "Displayed Width placed in Production Aperture" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x01, 0x05, 0x01, 0x0d, 0x00, 0x00, 0x00 }, {0x32, 0x0a}, true, "GenericPictureEssenceDescriptor_DisplayXOffset", // 148
    "The horizontal offset from the (in pixels) of the picture as displayed" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x01, 0x05, 0x01, 0x0e, 0x00, 0x00, 0x00 }, {0x32, 0x0b}, true, "GenericPictureEssenceDescriptor_DisplayYOffset", // 149
    "The vertical offset (in pixels) of the picture as displayed" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x01, 0x03, 0x02, 0x07, 0x00, 0x00, 0x00 }, {0x32, 0x17}, true, "GenericPictureEssenceDescriptor_DisplayF2Offset", // 150
    "Topness Adjustment for Displayed Picture" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00 }, {0x32, 0x0e}, false, "GenericPictureEssenceDescriptor_AspectRatio", // 151
    "Specifies the horizontal to vertical aspect ratio of the whole image as it is to be presented to avoid geometric distortion (and hence including any black edges)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x01, 0x03, 0x02, 0x09, 0x00, 0x00, 0x00 }, {0x32, 0x18}, true, "GenericPictureEssenceDescriptor_ActiveFormatDescriptor", // 152
    "Specifies the intended framing of the content within the displayed image" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x04, 0x01, 0x03, 0x02, 0x05, 0x00, 0x00, 0x00 }, {0x32, 0x0d}, false, "GenericPictureEssenceDescriptor_VideoLineMap", // 153
    "First active line in each field" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x05, 0x20, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00 }, {0x32, 0x0f}, true, "GenericPictureEssenceDescriptor_AlphaTransparency", // 154
    "Is Alpha Inverted" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x04, 0x01, 0x02, 0x01, 0x01, 0x01, 0x02, 0x00 }, {0x32, 0x10}, true, "GenericPictureEssenceDescriptor_Gamma", // 155
    "Registered UL of known Gamma" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x04, 0x18, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00 }, {0x32, 0x11}, true, "GenericPictureEssenceDescriptor_ImageAlignmentOffset", // 156
    "Byte Boundary alignment required for Low Level Essence Storage" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x04, 0x18, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00 }, {0x32, 0x13}, true, "GenericPictureEssenceDescriptor_ImageStartOffset", // 157
    "Unused bytes before start of stored data" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x04, 0x18, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00 }, {0x32, 0x14}, true, "GenericPictureEssenceDescriptor_ImageEndOffset", // 158
    "Unused bytes before start of stored data" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x04, 0x01, 0x03, 0x01, 0x06, 0x00, 0x00, 0x00 }, {0x32, 0x12}, true, "GenericPictureEssenceDescriptor_FieldDominance", // 159
    "The number of the field which is considered temporally to come first" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x04, 0x01, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00 }, {0x32, 0x01}, false, "GenericPictureEssenceDescriptor_PictureEssenceCoding", // 160
    "UL identifying the Picture Compression Scheme" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x28, 0x00 }, {0}, false, "CDCIEssenceDescriptor", // 161
    "Defines the CDCI Picture Essence Descriptor set" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x04, 0x01, 0x05, 0x03, 0x0a, 0x00, 0x00, 0x00 }, {0x33, 0x01}, false, "CDCIEssenceDescriptor_ComponentDepth", // 162
    "Number of active bits per sample (e.g. 8, 10, 16)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x01, 0x05, 0x01, 0x05, 0x00, 0x00, 0x00 }, {0x33, 0x02}, false, "CDCIEssenceDescriptor_HorizontalSubsampling", // 163
    "Specifies the H colour subsampling" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x04, 0x01, 0x05, 0x01, 0x10, 0x00, 0x00, 0x00 }, {0x33, 0x08}, true, "CDCIEssenceDescriptor_VerticalSubsampling", // 164
    "Specifies the V colour subsampling" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x01, 0x05, 0x01, 0x06, 0x00, 0x00, 0x00 }, {0x33, 0x03}, true, "CDCIEssenceDescriptor_ColorSiting", // 165
    "Enumerated value describing the color siting" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x03, 0x01, 0x02, 0x01, 0x0a, 0x00, 0x00, 0x00 }, {0x33, 0x0b}, true, "CDCIEssenceDescriptor_ReversedByteOrder", // 166
    "a FALSE value denotes Chroma followed by Luma pexels according to ITU Rec. 601" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x04, 0x18, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00 }, {0x33, 0x07}, true, "CDCIEssenceDescriptor_PaddingBits", // 167
    "Bits to round up each pixel to stored size" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x04, 0x01, 0x05, 0x03, 0x07, 0x00, 0x00, 0x00 }, {0x33, 0x09}, true, "CDCIEssenceDescriptor_AlphaSampleDepth", // 168
    "Number of bits per alpha sample" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x01, 0x05, 0x03, 0x03, 0x00, 0x00, 0x00 }, {0x33, 0x04}, true, "CDCIEssenceDescriptor_BlackRefLevel", // 169
    "Black refernece level e.g. 16 or 64 (8 or 10-bits)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x01, 0x05, 0x03, 0x04, 0x00, 0x00, 0x00 }, {0x33, 0x05}, true, "CDCIEssenceDescriptor_WhiteReflevel", // 170
    "White reference level e.g. 235 or 943 (8 or 10 bits)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x04, 0x01, 0x05, 0x03, 0x05, 0x00, 0x00, 0x00 }, {0x33, 0x06}, true, "CDCIEssenceDescriptor_ColorRange", // 171
    "Color range e.g. 225 or 897 (8 or 10 bits)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x29, 0x00 }, {0}, false, "RGBAEssenceDescriptor", // 172
    "Defines the RGBA Picture Essence Descriptor set" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x01, 0x05, 0x03, 0x0b, 0x00, 0x00, 0x00 }, {0x34, 0x06}, true, "RGBAEssenceDescriptor_ComponentMaxRef", // 173
    "Maximum value for RGB components, e.g. 235 or 940 (8 or 10 bits)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x01, 0x05, 0x03, 0x0c, 0x00, 0x00, 0x00 }, {0x34, 0x07}, true, "RGBAEssenceDescriptor_ComponentMinRef", // 174
    "Minimum value for RGB components, e.g. 16 or 64 (8 or 10 bits)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x01, 0x05, 0x03, 0x0d, 0x00, 0x00, 0x00 }, {0x34, 0x08}, true, "RGBAEssenceDescriptor_AlphaMaxRef", // 175
    "Maximum value for alpha component, e.g. 235 or 940 (8 or 10 bits)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x01, 0x05, 0x03, 0x0e, 0x00, 0x00, 0x00 }, {0x34, 0x09}, true, "RGBAEssenceDescriptor_AlphaMinRef", // 176
    "Minimum value for alpha component, e.g. 16 or 64 (8 or 10 bits)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x01, 0x04, 0x04, 0x01, 0x00, 0x00, 0x00 }, {0x34, 0x05}, true, "RGBAEssenceDescriptor_ScanningDirection", // 177
    "Enumerated Scanning Direction" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x04, 0x01, 0x05, 0x03, 0x06, 0x00, 0x00, 0x00 }, {0x34, 0x01}, false, "RGBAEssenceDescriptor_PixelLayout", // 178
    "Pixel Layout" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x04, 0x01, 0x05, 0x03, 0x08, 0x00, 0x00, 0x00 }, {0x34, 0x03}, true, "RGBAEssenceDescriptor_Palette", // 179
    "Palette" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x04, 0x01, 0x05, 0x03, 0x09, 0x00, 0x00, 0x00 }, {0x34, 0x04}, true, "RGBAEssenceDescriptor_PaletteLayout", // 180
    "Palette Layout" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x42, 0x00 }, {0}, false, "GenericSoundEssenceDescriptor", // 181
    "Defines the Sound Essence Descriptor set" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x02, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00 }, {0x3d, 0x03}, false, "GenericSoundEssenceDescriptor_AudioSamplingRate", // 182
    "Sampling rate of the audio essence" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x04, 0x02, 0x03, 0x01, 0x04, 0x00, 0x00, 0x00 }, {0x3d, 0x02}, false, "GenericSoundEssenceDescriptor_Locked", // 183
    "Boolean indicating that the Number of samples per frame is locked or unlocked (non-0 = locked)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x02, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00 }, {0x3d, 0x04}, true, "GenericSoundEssenceDescriptor_AudioRefLevel", // 184
    "Audio reference level which gives the number of dBm for 0VU" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x01, 
      0x04, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00 }, {0x3d, 0x05}, true, "GenericSoundEssenceDescriptor_ElectroSpatialFormulation", // 185
    "E.g. mono, dual mono, stereo, A,B etc (enum)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x02, 0x01, 0x01, 0x04, 0x00, 0x00, 0x00 }, {0x3d, 0x07}, false, "GenericSoundEssenceDescriptor_ChannelCount", // 186
    "Number of Sound Channels" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x04, 0x02, 0x03, 0x03, 0x04, 0x00, 0x00, 0x00 }, {0x3d, 0x01}, false, "GenericSoundEssenceDescriptor_QuantizationBits", // 187
    "Number of quantization bits" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x02, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00 }, {0x3d, 0x0c}, true, "GenericSoundEssenceDescriptor_DialNorm", // 188
    "Gain to be applied to normalise perceived loudness of the clip, defined by ATSC A/53 (1dB per step)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x02, 
      0x04, 0x02, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00 }, {0x3d, 0x06}, false, "GenericSoundEssenceDescriptor_SoundEssenceCompression", // 189
    "UL identifying the Sound Compression Scheme" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x43, 0x00 }, {0}, false, "GenericDataEssenceDescriptor", // 190
    "Defines the Data Essence Descriptor set" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x03, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00 }, {0x3e, 0x01}, false, "GenericDataEssenceDescriptor_DataEssenceCoding", // 191
    "Specifies the data essence coding type" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x44, 0x00 }, {0}, false, "MultipleDescriptor", // 192
    "Defines the Multiple Descriptor set" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x04, 
      0x06, 0x01, 0x01, 0x04, 0x06, 0x0b, 0x00, 0x00 }, {0x3f, 0x01}, false, "MultipleDescriptor_SubDescriptorUIDs", // 193
    "Unordered array of strong references to File Descriptor sets (1 per interleaved item within the Essence Container)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x51, 0x00 }, {0}, false, "MPEG2VideoDescriptor", // 194
    "Defines the MPEG2 Picture Essence Descriptor set" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x01, 0x06, 0x02, 0x01, 0x02, 0x00, 0x00 }, {0}, true, "MPEG2VideoDescriptor_SingleSequence", // 195
    "TRUE if the essence consists of a single MPEG sequence. False if there are a number of sequences. This flag implies that the sequence header information is not varying in the essence stream." },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x01, 0x06, 0x02, 0x01, 0x03, 0x00, 0x00 }, {0}, true, "MPEG2VideoDescriptor_ConstantBFrames", // 196
    "TRUE if the number of B frames is always constant" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x01, 0x06, 0x02, 0x01, 0x04, 0x00, 0x00 }, {0}, true, "MPEG2VideoDescriptor_CodedContentType", // 197
    "0= &quot;Unknown&quot;,1= &quot;Progressive&quot;, 2= &quot;Interlaced&quot;, 3= &quot;Mixed&quot;: an enumerated value which tells if the underlying content which was MPEG coded was of a known type" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x01, 0x06, 0x02, 0x01, 0x05, 0x00, 0x00 }, {0}, true, "MPEG2VideoDescriptor_LowDelay", // 198
    "TRUE if low delay mode was used in the sequence" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x01, 0x06, 0x02, 0x01, 0x06, 0x00, 0x00 }, {0}, true, "MPEG2VideoDescriptor_ClosedGOP", // 199
    "TRUE if closed_gop is set in all GOP Headers, per 13818-1 IBP descriptor" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x01, 0x06, 0x02, 0x01, 0x07, 0x00, 0x00 }, {0}, true, "MPEG2VideoDescriptor_IdenticalGOP", // 200
    "TRUE if every GOP in the sequence is constructed the same, per 13818-1 IBP descriptor" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x01, 0x06, 0x02, 0x01, 0x08, 0x00, 0x00 }, {0}, true, "MPEG2VideoDescriptor_MaxGOP", // 201
    "Specifies the maximum occurring spacing between I frames, per 13818-1 IBP descriptor. A value of 0 or the absence of this property implies no limit to the maximum GOP" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x01, 0x06, 0x02, 0x01, 0x09, 0x00, 0x00 }, {0}, true, "MPEG2VideoDescriptor_BPictureCount", // 202
    "Specifies the maximum number of B pictures between P or I frames, equivalent to 13818-2 annex D (M-1)" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x01, 0x06, 0x02, 0x01, 0x0b, 0x00, 0x00 }, {0}, true, "MPEG2VideoDescriptor_BitRate", // 203
    "Maximum bit rate of MPEG video elementary stream in bit/s as defined in ISO-13818-2 bit_rate property" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x01, 0x06, 0x02, 0x01, 0x0a, 0x00, 0x00 }, {0}, true, "MPEG2VideoDescriptor_ProfileAndLevel", // 204
    "Specifies the MPEG-2 video profile and level. The value is taken directly from the profile_and_level_indication in the MPEG-2 sequence header extension. For main profile @ main level, the value is 0x48. For 4:2:2 profile @ main level, the value is 0x85" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x48, 0x00 }, {0}, false, "WaveAudioDescriptor", // 205
    "Defines the Wave Audio Essence Descriptor Set" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x02, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00 }, {0x3d, 0x0a}, false, "WaveAudioDescriptor_BlockAlign", // 206
    "Sample Block alignment" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x02, 0x03, 0x02, 0x02, 0x00, 0x00, 0x00 }, {0x3d, 0x0b}, true, "WaveAudioDescriptor_SequenceOffset", // 207
    "Zero-based ordinal frame number of first essence data within five-frame sequence" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x02, 0x03, 0x03, 0x05, 0x00, 0x00, 0x00 }, {0x3d, 0x09}, false, "WaveAudioDescriptor_AvgBps", // 208
    "Average Bytes per second" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x05, 
      0x04, 0x02, 0x03, 0x01, 0x0e, 0x00, 0x00, 0x00 }, {0x3d, 0x0e}, true, "WaveAudioDescriptor_PeakEnvelope", // 209
    "Peak Envelope from &lt;LEVL> Chunk" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x01, 0x01, 0x01, 0x01, 0x5a, 0x00 }, {0}, false, "JPEG2000PictureSubDescriptor", // 210
    "JPEG 2000 Picture Sub Descriptor" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x0a, 
      0x04, 0x01, 0x06, 0x03, 0x01, 0x00, 0x00, 0x00 }, {0}, false, "JPEG2000PictureSubDescriptor_Rsize", // 211
    "An enumerated value that defines the decoder capabilities" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x0a, 
      0x04, 0x01, 0x06, 0x03, 0x02, 0x00, 0x00, 0x00 }, {0}, false, "JPEG2000PictureSubDescriptor_Xsize", // 212
    "Width of the reference grid" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x0a, 
      0x04, 0x01, 0x06, 0x03, 0x03, 0x00, 0x00, 0x00 }, {0}, false, "JPEG2000PictureSubDescriptor_Ysize", // 213
    "Height of the reference grid" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x0a, 
      0x04, 0x01, 0x06, 0x03, 0x04, 0x00, 0x00, 0x00 }, {0}, false, "JPEG2000PictureSubDescriptor_XOsize", // 214
    "Horizontal offset from the origin of the reference grid to the left side of the image area" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x0a, 
      0x04, 0x01, 0x06, 0x03, 0x05, 0x00, 0x00, 0x00 }, {0}, false, "JPEG2000PictureSubDescriptor_YOsize", // 215
    "Vertical offset from the origin of the reference grid to the top side of the image area" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x0a, 
      0x04, 0x01, 0x06, 0x03, 0x06, 0x00, 0x00, 0x00 }, {0}, false, "JPEG2000PictureSubDescriptor_XTsize", // 216
    "Width of one reference tile with respect to the reference grid" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x0a, 
      0x04, 0x01, 0x06, 0x03, 0x07, 0x00, 0x00, 0x00 }, {0}, false, "JPEG2000PictureSubDescriptor_YTsize", // 217
    "Height of one reference tile with respect to the reference grid" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x0a, 
      0x04, 0x01, 0x06, 0x03, 0x08, 0x00, 0x00, 0x00 }, {0}, false, "JPEG2000PictureSubDescriptor_XTOsize", // 218
    "Horizontal offset from the origin of the reference grid to the left side of the first tile" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x0a, 
      0x04, 0x01, 0x06, 0x03, 0x09, 0x00, 0x00, 0x00 }, {0}, false, "JPEG2000PictureSubDescriptor_YTOsize", // 219
    "Vertical offset from the origin of the reference grid to the top side of the first tile" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x0a, 
      0x04, 0x01, 0x06, 0x03, 0x0a, 0x00, 0x00, 0x00 }, {0}, false, "JPEG2000PictureSubDescriptor_Csize", // 220
    "The number of components in the picture" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x0a, 
      0x04, 0x01, 0x06, 0x03, 0x0b, 0x00, 0x00, 0x00 }, {0}, false, "JPEG2000PictureSubDescriptor_PictureComponentSizing", // 221
    "Array of picture components" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x0a, 
      0x04, 0x01, 0x06, 0x03, 0x0c, 0x00, 0x00, 0x00 }, {0}, true, "JPEG2000PictureSubDescriptor_CodingStyleDefault", // 222
    "Default coding style for all components. Use this value only if static for all pictures in the Essence Container" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x0a, 
      0x04, 0x01, 0x06, 0x03, 0x0d, 0x00, 0x00, 0x00 }, {0}, true, "JPEG2000PictureSubDescriptor_QuantizationDefault", // 223
    "Default quantization style for all components. Use this value only if static for all pictures in the Essence Container" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00 }, {0}, false, "DM_Framework", // 224
    "Superclass for all concrete DM Frameworks" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 }, {0}, false, "DM_Set", // 225
    "Superclass for all concrete DM Frameworks" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x04, 0x01, 0x01, 0x07, 
      0x0d, 0x01, 0x03, 0x01, 0x02, 0x0b, 0x01, 0x00 }, {0}, false, "EncryptedContainerLabel", // 226
    "DCP-Crypto Encrypted Essence Container, frame-wrapped" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x04, 0x01, 0x01, 0x07, 
      0x0d, 0x01, 0x04, 0x01, 0x02, 0x01, 0x01, 0x00 }, {0}, false, "CryptographicFrameworkLabel", // 227
    "DCP-Crypto Framework" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x04, 0x01, 0x02, 0x01, 0x00, 0x00 }, {0}, false, "CryptographicFramework", // 228
    "DCP-Encryption Cryptographic Framework" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x09, 
      0x06, 0x01, 0x01, 0x04, 0x02, 0x0d, 0x00, 0x00 }, {0}, false, "CryptographicFramework_ContextSR", // 229
    "Strong Reference to the associated Cryptographic Context" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x53, 0x01, 0x01, 
      0x0d, 0x01, 0x04, 0x01, 0x02, 0x02, 0x00, 0x00 }, {0}, false, "CryptographicContext", // 230
    "cryptographic information that applies to encrypted essence tracks as a whole" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x09, 
      0x01, 0x01, 0x15, 0x11, 0x00, 0x00, 0x00, 0x00 }, {0}, false, "CryptographicContext_ContextID", // 231
    "Persistent Unique identifier for the context" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x09, 
      0x06, 0x01, 0x01, 0x02, 0x02, 0x00, 0x00, 0x00 }, {0}, false, "CryptographicContext_SourceEssenceContainer", // 232
    "Essence Container Label for the source essence, prior to encryption" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x09, 
      0x02, 0x09, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00 }, {0}, false, "CryptographicContext_CipherAlgorithm", // 233
    "Algorithm used for Triplet encryption, if any" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x09, 
      0x02, 0x09, 0x03, 0x02, 0x01, 0x00, 0x00, 0x00 }, {0}, false, "CryptographicContext_MICAlgorithm", // 234
    "Algorithm used for Triplet integrity, if any" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x09, 
      0x02, 0x09, 0x03, 0x01, 0x02, 0x00, 0x00, 0x00 }, {0}, false, "CryptographicContext_CryptographicKeyID", // 235
    "Unique identifier for the cryptographic key" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x02, 0x04, 0x01, 0x07, 
      0x0d, 0x01, 0x03, 0x01, 0x02, 0x7e, 0x01, 0x00 }, {0}, false, "EncryptedTriplet", // 236
    "encrypted data and cryptographic information specific to the Triplet" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x09, 
      0x06, 0x01, 0x01, 0x06, 0x03, 0x00, 0x00, 0x00 }, {0}, false, "EncryptedTriplet_ContextIDLink", // 237
    "Persistent Unique identifier for the context.associated with this Triplet" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x09, 
      0x06, 0x09, 0x02, 0x01, 0x03, 0x00, 0x00, 0x00 }, {0}, false, "EncryptedTriplet_PlaintextOffset", // 238
    "Offset within the source at which encryption starts" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x09, 
      0x06, 0x01, 0x01, 0x02, 0x03, 0x00, 0x00, 0x00 }, {0}, false, "EncryptedTriplet_SourceKey", // 239
    "Key of the source Triplet" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x09, 
      0x04, 0x06, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00 }, {0}, false, "EncryptedTriplet_SourceLength", // 240
    "Length of the value of the source Triplet" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x09, 
      0x02, 0x09, 0x03, 0x01, 0x03, 0x00, 0x00, 0x00 }, {0}, false, "EncryptedTriplet_EncryptedSourceValue", // 241
    "Encrypted Source value starting at Plaintext Offset" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x09, 
      0x06, 0x01, 0x01, 0x06, 0x02, 0x00, 0x00, 0x00 }, {0}, true, "EncryptedTriplet_TrackFileID", // 242
    "The identifier of the AS-DCP Track File containing this Triplet" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x09, 
      0x06, 0x10, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00 }, {0}, true, "EncryptedTriplet_SequenceNumber", // 243
    "Sequence number of this Triplet within the Track File" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x01, 0x01, 0x01, 0x09, 
      0x02, 0x09, 0x03, 0x02, 0x02, 0x00, 0x00, 0x00 }, {0}, true, "EncryptedTriplet_MIC", // 244
    "Keyed HMAC" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x04, 0x01, 0x01, 0x07, 
      0x02, 0x09, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00 }, {0}, false, "CipherAlgorithmAES128CBC", // 245
    "Identifes the use of AES128 CBC mode cipher algorithm" },

  { { 0x06, 0x0e, 0x2b, 0x34, 0x04, 0x01, 0x01, 0x07, 
      0x02, 0x09, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00 }, {0}, false, "HMACAlgorithmSHA1128", // 246
    "Identifes the use of SHA1 128 bit HMAC algorithm" },

  { 0, 0, 0 }
};

const ui32_t MDDindex_KLVFill = 4;
const ui32_t MDDindex_PartitionMetadata_MajorVersion = 5;
const ui32_t MDDindex_PartitionMetadata_MinorVersion = 6;
const ui32_t MDDindex_PartitionMetadata_KAGSize = 7;
const ui32_t MDDindex_PartitionMetadata_ThisPartition = 8;
const ui32_t MDDindex_PartitionMetadata_PreviousPartition = 9;
const ui32_t MDDindex_PartitionMetadata_FooterPartition = 10;
const ui32_t MDDindex_PartitionMetadata_HeaderByteCount = 11;
const ui32_t MDDindex_PartitionMetadata_IndexByteCount = 12;
const ui32_t MDDindex_PartitionMetadata_IndexSID = 13;
const ui32_t MDDindex_PartitionMetadata_BodyOffset = 14;
const ui32_t MDDindex_PartitionMetadata_BodySID = 15;
const ui32_t MDDindex_PartitionMetadata_OperationalPattern = 16;
const ui32_t MDDindex_PartitionMetadata_EssenceContainers = 17;
const ui32_t MDDindex_OpenHeader = 18;
const ui32_t MDDindex_OpenCompleteHeader = 19;
const ui32_t MDDindex_ClosedHeader = 20;
const ui32_t MDDindex_ClosedCompleteHeader = 21;
const ui32_t MDDindex_OpenBodyPartition = 22;
const ui32_t MDDindex_OpenCompleteBodyPartition = 23;
const ui32_t MDDindex_ClosedBodyPartition = 24;
const ui32_t MDDindex_ClosedCompleteBodyPartition = 25;
const ui32_t MDDindex_Footer = 26;
const ui32_t MDDindex_CompleteFooter = 27;
const ui32_t MDDindex_Primer = 28;
const ui32_t MDDindex_Primer_LocalTagEntryBatch = 29;
const ui32_t MDDindex_LocalTagEntryBatch_Primer_LocalTag = 30;
const ui32_t MDDindex_LocalTagEntryBatch_Primer_UID = 31;
const ui32_t MDDindex_InterchangeObject_InstanceUID = 32;
const ui32_t MDDindex_GenerationInterchangeObject_GenerationUID = 33;
const ui32_t MDDindex_DefaultObject = 34;
const ui32_t MDDindex_IndexTableSegmentBase_IndexEditRate = 35;
const ui32_t MDDindex_IndexTableSegmentBase_IndexStartPosition = 36;
const ui32_t MDDindex_IndexTableSegmentBase_IndexDuration = 37;
const ui32_t MDDindex_IndexTableSegmentBase_EditUnitByteCount = 38;
const ui32_t MDDindex_IndexTableSegmentBase_IndexSID = 39;
const ui32_t MDDindex_IndexTableSegmentBase_BodySID = 40;
const ui32_t MDDindex_IndexTableSegmentBase_SliceCount = 41;
const ui32_t MDDindex_IndexTableSegmentBase_PosTableCount = 42;
const ui32_t MDDindex_IndexTableSegment = 43;
const ui32_t MDDindex_IndexTableSegment_DeltaEntryArray = 44;
const ui32_t MDDindex_DeltaEntryArray_IndexTableSegment_PosTableIndex = 45;
const ui32_t MDDindex_DeltaEntryArray_IndexTableSegment_Slice = 46;
const ui32_t MDDindex_DeltaEntryArray_IndexTableSegment_ElementDelta = 47;
const ui32_t MDDindex_IndexTableSegment_IndexEntryArray = 48;
const ui32_t MDDindex_IndexEntryArray_IndexTableSegment_TemporalOffset = 49;
const ui32_t MDDindex_IndexEntryArray_IndexTableSegment_AnchorOffset = 50;
const ui32_t MDDindex_IndexEntryArray_IndexTableSegment_Flags = 51;
const ui32_t MDDindex_IndexEntryArray_IndexTableSegment_StreamOffset = 52;
const ui32_t MDDindex_IndexEntryArray_IndexTableSegment_SliceOffsetArray = 53;
const ui32_t MDDindex_IndexEntryArray_IndexTableSegment_PosTableArray = 54;
const ui32_t MDDindex_RandomIndexMetadata = 55;
const ui32_t MDDindex_PartitionArray_RandomIndexMetadata_BodySID = 56;
const ui32_t MDDindex_PartitionArray_RandomIndexMetadata_ByteOffset = 57;
const ui32_t MDDindex_RandomIndexMetadata_Length = 58;
const ui32_t MDDindex_Preface = 59;
const ui32_t MDDindex_Preface_LastModifiedDate = 60;
const ui32_t MDDindex_Preface_Version = 61;
const ui32_t MDDindex_Preface_ObjectModelVersion = 62;
const ui32_t MDDindex_Preface_PrimaryPackage = 63;
const ui32_t MDDindex_Preface_Identifications = 64;
const ui32_t MDDindex_Preface_ContentStorage = 65;
const ui32_t MDDindex_Preface_OperationalPattern = 66;
const ui32_t MDDindex_Preface_EssenceContainers = 67;
const ui32_t MDDindex_Preface_DMSchemes = 68;
const ui32_t MDDindex_Identification = 69;
const ui32_t MDDindex_Identification_ThisGenerationUID = 70;
const ui32_t MDDindex_Identification_CompanyName = 71;
const ui32_t MDDindex_Identification_ProductName = 72;
const ui32_t MDDindex_Identification_ProductVersion = 73;
const ui32_t MDDindex_Identification_VersionString = 74;
const ui32_t MDDindex_Identification_ProductUID = 75;
const ui32_t MDDindex_Identification_ModificationDate = 76;
const ui32_t MDDindex_Identification_ToolkitVersion = 77;
const ui32_t MDDindex_Identification_Platform = 78;
const ui32_t MDDindex_ContentStorage = 79;
const ui32_t MDDindex_ContentStorage_Packages = 80;
const ui32_t MDDindex_ContentStorage_EssenceContainerData = 81;
const ui32_t MDDindex_EssenceContainerData = 82;
const ui32_t MDDindex_EssenceContainerData_LinkedPackageUID = 83;
const ui32_t MDDindex_EssenceContainerData_IndexSID = 84;
const ui32_t MDDindex_EssenceContainerData_BodySID = 85;
const ui32_t MDDindex_GenericPackage_PackageUID = 86;
const ui32_t MDDindex_GenericPackage_Name = 87;
const ui32_t MDDindex_GenericPackage_PackageCreationDate = 88;
const ui32_t MDDindex_GenericPackage_PackageModifiedDate = 89;
const ui32_t MDDindex_GenericPackage_Tracks = 90;
const ui32_t MDDindex_NetworkLocator = 91;
const ui32_t MDDindex_NetworkLocator_URLString = 92;
const ui32_t MDDindex_TextLocator = 93;
const ui32_t MDDindex_TextLocator_LocatorName = 94;
const ui32_t MDDindex_GenericTrack_TrackID = 95;
const ui32_t MDDindex_GenericTrack_TrackNumber = 96;
const ui32_t MDDindex_GenericTrack_TrackName = 97;
const ui32_t MDDindex_GenericTrack_Sequence = 98;
const ui32_t MDDindex_StaticTrack = 99;
const ui32_t MDDindex_Track = 100;
const ui32_t MDDindex_Track_EditRate = 101;
const ui32_t MDDindex_Track_Origin = 102;
const ui32_t MDDindex_EventTrack = 103;
const ui32_t MDDindex_EventTrack_EventEditRate = 104;
const ui32_t MDDindex_EventTrack_EventOrigin = 105;
const ui32_t MDDindex_StructuralComponent_DataDefinition = 106;
const ui32_t MDDindex_StructuralComponent_Duration = 107;
const ui32_t MDDindex_Sequence = 108;
const ui32_t MDDindex_Sequence_StructuralComponents = 109;
const ui32_t MDDindex_TimecodeComponent = 110;
const ui32_t MDDindex_TimecodeComponent_RoundedTimecodeBase = 111;
const ui32_t MDDindex_TimecodeComponent_StartTimecode = 112;
const ui32_t MDDindex_TimecodeComponent_DropFrame = 113;
const ui32_t MDDindex_SourceClip = 114;
const ui32_t MDDindex_SourceClip_StartPosition = 115;
const ui32_t MDDindex_SourceClip_SourcePackageID = 116;
const ui32_t MDDindex_SourceClip_SourceTrackID = 117;
const ui32_t MDDindex_DMSegment = 118;
const ui32_t MDDindex_DMSegment_EventStartPosition = 119;
const ui32_t MDDindex_DMSegment_EventComment = 120;
const ui32_t MDDindex_DMSegment_TrackIDs = 121;
const ui32_t MDDindex_DMSegment_DMFramework = 122;
const ui32_t MDDindex_DMSourceClip = 123;
const ui32_t MDDindex_DMSourceClip_DMSourceClipTrackIDs = 124;
const ui32_t MDDindex_MaterialPackage = 125;
const ui32_t MDDindex_SourcePackage = 126;
const ui32_t MDDindex_SourcePackage_Descriptor = 127;
const ui32_t MDDindex_GenericDescriptor_Locators = 128;
const ui32_t MDDindex_GenericDescriptor_SubDescriptors = 129;
const ui32_t MDDindex_FileDescriptor = 130;
const ui32_t MDDindex_FileDescriptor_LinkedTrackID = 131;
const ui32_t MDDindex_FileDescriptor_SampleRate = 132;
const ui32_t MDDindex_FileDescriptor_ContainerDuration = 133;
const ui32_t MDDindex_FileDescriptor_EssenceContainer = 134;
const ui32_t MDDindex_FileDescriptor_Codec = 135;
const ui32_t MDDindex_GenericPictureEssenceDescriptor = 136;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_SignalStandard = 137;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_FrameLayout = 138;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_StoredWidth = 139;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_StoredHeight = 140;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_StoredF2Offset = 141;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_SampledWidth = 142;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_SampledHeight = 143;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_SampledXOffset = 144;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_SampledYOffset = 145;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_DisplayHeight = 146;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_DisplayWidth = 147;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_DisplayXOffset = 148;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_DisplayYOffset = 149;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_DisplayF2Offset = 150;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_AspectRatio = 151;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_ActiveFormatDescriptor = 152;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_VideoLineMap = 153;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_AlphaTransparency = 154;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_Gamma = 155;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_ImageAlignmentOffset = 156;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_ImageStartOffset = 157;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_ImageEndOffset = 158;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_FieldDominance = 159;
const ui32_t MDDindex_GenericPictureEssenceDescriptor_PictureEssenceCoding = 160;
const ui32_t MDDindex_CDCIEssenceDescriptor = 161;
const ui32_t MDDindex_CDCIEssenceDescriptor_ComponentDepth = 162;
const ui32_t MDDindex_CDCIEssenceDescriptor_HorizontalSubsampling = 163;
const ui32_t MDDindex_CDCIEssenceDescriptor_VerticalSubsampling = 164;
const ui32_t MDDindex_CDCIEssenceDescriptor_ColorSiting = 165;
const ui32_t MDDindex_CDCIEssenceDescriptor_ReversedByteOrder = 166;
const ui32_t MDDindex_CDCIEssenceDescriptor_PaddingBits = 167;
const ui32_t MDDindex_CDCIEssenceDescriptor_AlphaSampleDepth = 168;
const ui32_t MDDindex_CDCIEssenceDescriptor_BlackRefLevel = 169;
const ui32_t MDDindex_CDCIEssenceDescriptor_WhiteReflevel = 170;
const ui32_t MDDindex_CDCIEssenceDescriptor_ColorRange = 171;
const ui32_t MDDindex_RGBAEssenceDescriptor = 172;
const ui32_t MDDindex_RGBAEssenceDescriptor_ComponentMaxRef = 173;
const ui32_t MDDindex_RGBAEssenceDescriptor_ComponentMinRef = 174;
const ui32_t MDDindex_RGBAEssenceDescriptor_AlphaMaxRef = 175;
const ui32_t MDDindex_RGBAEssenceDescriptor_AlphaMinRef = 176;
const ui32_t MDDindex_RGBAEssenceDescriptor_ScanningDirection = 177;
const ui32_t MDDindex_RGBAEssenceDescriptor_PixelLayout = 178;
const ui32_t MDDindex_RGBAEssenceDescriptor_Palette = 179;
const ui32_t MDDindex_RGBAEssenceDescriptor_PaletteLayout = 180;
const ui32_t MDDindex_GenericSoundEssenceDescriptor = 181;
const ui32_t MDDindex_GenericSoundEssenceDescriptor_AudioSamplingRate = 182;
const ui32_t MDDindex_GenericSoundEssenceDescriptor_Locked = 183;
const ui32_t MDDindex_GenericSoundEssenceDescriptor_AudioRefLevel = 184;
const ui32_t MDDindex_GenericSoundEssenceDescriptor_ElectroSpatialFormulation = 185;
const ui32_t MDDindex_GenericSoundEssenceDescriptor_ChannelCount = 186;
const ui32_t MDDindex_GenericSoundEssenceDescriptor_QuantizationBits = 187;
const ui32_t MDDindex_GenericSoundEssenceDescriptor_DialNorm = 188;
const ui32_t MDDindex_GenericSoundEssenceDescriptor_SoundEssenceCompression = 189;
const ui32_t MDDindex_GenericDataEssenceDescriptor = 190;
const ui32_t MDDindex_GenericDataEssenceDescriptor_DataEssenceCoding = 191;
const ui32_t MDDindex_MultipleDescriptor = 192;
const ui32_t MDDindex_MultipleDescriptor_SubDescriptorUIDs = 193;
const ui32_t MDDindex_MPEG2VideoDescriptor = 194;
const ui32_t MDDindex_MPEG2VideoDescriptor_SingleSequence = 195;
const ui32_t MDDindex_MPEG2VideoDescriptor_ConstantBFrames = 196;
const ui32_t MDDindex_MPEG2VideoDescriptor_CodedContentType = 197;
const ui32_t MDDindex_MPEG2VideoDescriptor_LowDelay = 198;
const ui32_t MDDindex_MPEG2VideoDescriptor_ClosedGOP = 199;
const ui32_t MDDindex_MPEG2VideoDescriptor_IdenticalGOP = 200;
const ui32_t MDDindex_MPEG2VideoDescriptor_MaxGOP = 201;
const ui32_t MDDindex_MPEG2VideoDescriptor_BPictureCount = 202;
const ui32_t MDDindex_MPEG2VideoDescriptor_BitRate = 203;
const ui32_t MDDindex_MPEG2VideoDescriptor_ProfileAndLevel = 204;
const ui32_t MDDindex_WaveAudioDescriptor = 205;
const ui32_t MDDindex_WaveAudioDescriptor_BlockAlign = 206;
const ui32_t MDDindex_WaveAudioDescriptor_SequenceOffset = 207;
const ui32_t MDDindex_WaveAudioDescriptor_AvgBps = 208;
const ui32_t MDDindex_WaveAudioDescriptor_PeakEnvelope = 209;
const ui32_t MDDindex_JPEG2000PictureSubDescriptor = 210;
const ui32_t MDDindex_JPEG2000PictureSubDescriptor_Rsize = 211;
const ui32_t MDDindex_JPEG2000PictureSubDescriptor_Xsize = 212;
const ui32_t MDDindex_JPEG2000PictureSubDescriptor_Ysize = 213;
const ui32_t MDDindex_JPEG2000PictureSubDescriptor_XOsize = 214;
const ui32_t MDDindex_JPEG2000PictureSubDescriptor_YOsize = 215;
const ui32_t MDDindex_JPEG2000PictureSubDescriptor_XTsize = 216;
const ui32_t MDDindex_JPEG2000PictureSubDescriptor_YTsize = 217;
const ui32_t MDDindex_JPEG2000PictureSubDescriptor_XTOsize = 218;
const ui32_t MDDindex_JPEG2000PictureSubDescriptor_YTOsize = 219;
const ui32_t MDDindex_JPEG2000PictureSubDescriptor_Csize = 220;
const ui32_t MDDindex_JPEG2000PictureSubDescriptor_PictureComponentSizing = 221;
const ui32_t MDDindex_JPEG2000PictureSubDescriptor_CodingStyleDefault = 222;
const ui32_t MDDindex_JPEG2000PictureSubDescriptor_QuantizationDefault = 223;
const ui32_t MDDindex_DM_Framework = 224;
const ui32_t MDDindex_DM_Set = 225;
const ui32_t MDDindex_EncryptedContainerLabel = 226;
const ui32_t MDDindex_CryptographicFrameworkLabel = 227;
const ui32_t MDDindex_CryptographicFramework = 228;
const ui32_t MDDindex_CryptographicFramework_ContextSR = 229;
const ui32_t MDDindex_CryptographicContext = 230;
const ui32_t MDDindex_CryptographicContext_ContextID = 231;
const ui32_t MDDindex_CryptographicContext_SourceEssenceContainer = 232;
const ui32_t MDDindex_CryptographicContext_CipherAlgorithm = 233;
const ui32_t MDDindex_CryptographicContext_MICAlgorithm = 234;
const ui32_t MDDindex_CryptographicContext_CryptographicKeyID = 235;
const ui32_t MDDindex_EncryptedTriplet = 236;
const ui32_t MDDindex_EncryptedTriplet_ContextIDLink = 237;
const ui32_t MDDindex_EncryptedTriplet_PlaintextOffset = 238;
const ui32_t MDDindex_EncryptedTriplet_SourceKey = 239;
const ui32_t MDDindex_EncryptedTriplet_SourceLength = 240;
const ui32_t MDDindex_EncryptedTriplet_EncryptedSourceValue = 241;
const ui32_t MDDindex_EncryptedTriplet_TrackFileID = 242;
const ui32_t MDDindex_EncryptedTriplet_SequenceNumber = 243;
const ui32_t MDDindex_EncryptedTriplet_MIC = 244;
const ui32_t MDDindex_CipherAlgorithmAES128CBC = 245;
const ui32_t MDDindex_HMACAlgorithmSHA1128 = 246;

#endif // _MDD_H_

//
// end MDD.h
//
